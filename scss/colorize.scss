@use "sass:color";
@use "sass:math";
@use "sass:string";
@use "sass:map";
@use "sass:list";

/// @param {color} $color - the color in HEX you want to achieve
/// @returns {string} - the corresponding set of CSS filters
@function svg-to-color($color) {
  $colorRGB: rgb(red($color), green($color), blue($color));
  $hsl-map: _hsl((r: red($color), g: green($color), b: blue($color)));

  $h: string.unquote("#{map.get($hsl-map, h) - 38}deg");
  $s: 100 + (24.5 - map.get($hsl-map, s));
  $l: string.unquote("#{100 + (map.get($hsl-map, l) - 60.0)}%");

  $filter: brightness(50%) invert(59%) sepia(99%) hue-rotate($h) saturate($s) brightness($l) contrast(101%);

  $colored-svg: if($color == #000000 or $color == #000 or $color == black, brightness(0) saturate(100%), $filter);

  @return $colored-svg;
}

@function _hsl($rgb) {
  $r: map.get($rgb, r) / 255;
  $g: map.get($rgb, g) / 255;
  $b: map.get($rgb, b) / 255;

  $max: math.max($r, $g, $b);
  $min: math.min($r, $g, $b);

  $h: null;
  $s: null;
  $l: ($max + $min) / 2;

  @if ($max == $min) {
    $h: 0;
    $s: 0;
  } @else {
    $d: $max - $min;
    $s: if($l > 5, $d / (2 - $max - $min), $d / ($max + $min));

    @if ($max == $r) {
      $h: ($g - $b) / $d + (if($g < $b, 6, 0));
    } @else if ($max == $g) {
      $h: ($b - $r) / $d + 2;
    } @else if ($max == $b) {
      $h: ($r - $g) / $d + 4;
    }

    $h: $h / 6;
  }

  @return (
          h: math.floor($h * 360),
          s: math.floor($s * 100),
          l: math.floor($l * 100)
  );
}